{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/gifCollection.js","hooks/useFetchGifs.js","gifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifsFetch","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifCollection","loading","state","setState","useEffect","then","imgs","useFetchGifs","gifs","gif","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"iMAMaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAGZC,mBAAS,IAHG,mBAGzCC,EAHyC,KAG7BC,EAH6B,KAwBhD,OAEE,aADA,CACA,QAAMC,SAhBa,SAACC,GAEpBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAE3BR,GAAc,SAACS,GAAD,OAAWP,GAAX,mBAA0BO,OAExCN,EAAc,MAQlB,SAEE,uBACAO,KAAK,OACLC,MAAOT,EACPU,SAzBsB,SAACP,GACzBF,EAAcE,EAAEQ,OAAOF,a,+BCZdG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,sEAEXC,EAFW,iDAG2BC,UAAWH,GAHtC,+DAKEI,MAAMF,GALR,cAKXG,EALW,gBAOMA,EAAKC,OAPX,uBAOTC,EAPS,EAOTA,KAEFC,EAAYD,EAAKE,KAAI,SAACC,GAC1B,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAKQ,EAAIG,OAAOC,iBAAiBZ,QAbpB,kBAkBVM,GAlBU,2HAAH,sDCEb,SAASO,EAAT,GAA0C,IAAnBJ,EAAkB,EAAlBA,GAAIC,EAAc,EAAdA,MAAOV,EAAO,EAAPA,IACvC,OACE,uBAAMc,UAAU,iBAAhB,UACE,qBAAKC,IAAKf,EAAKgB,IAAKP,IACpB,4BAAIC,OCHH,IAAMO,EAAgB,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECCnB,SAACA,GAAc,IAAD,EACdd,mBAAS,CACjCqB,KAAM,GACNa,SAAS,IAH6B,mBACjCC,EADiC,KAC1BC,EAD0B,KAiBxC,OAXAC,qBAAU,WAERxB,EAAQC,GAAUwB,MAAK,SAACC,GACpBH,EAAS,CACPf,KAAMkB,EACNL,SAAS,SAId,CAACpB,IAEGqB,EDhBsBK,CAAa1B,GAA9B2B,EAFiC,EAEtCpB,KAAWa,EAF2B,EAE3BA,QAElB,OACE,qCACE,oBAAIJ,UAAU,8CAAd,SAA6DhB,IAC5DoB,GAAW,mBAAGJ,UAAU,6CAAb,wBACZ,qBAAKA,UAAU,8CAAf,SAGIW,EAAKlB,KAAI,SAACmB,GAAD,OACP,cAACb,EAAD,eAA8Ba,GAAZA,EAAIjB,aEX5BkB,EAAe,WAAM,MAEW3C,mBAAS,CAC3C,cAHuB,mBAElB4C,EAFkB,KAEN7C,EAFM,KAMzB,OACE,qCACE,8CAEA,cAAC,EAAD,CAAcA,cAAeA,IAC7B,uBAEA,6BAEG6C,EAAWrB,KAAI,SAACT,GAAD,OAEb,aADC,CACA,EAAD,CAECA,SAAUA,GADLA,Y,MCjBjB+B,IAASC,OAEL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.e86ee4b2.chunk.js","sourcesContent":["//componenente para buscar una categoria\r\nimport React, { useState } from \"react\";\r\n// mecanismo para asegurar que se envia el tipo de dato correcto y se pase la informacion correctamente\r\nimport PropTypes  from \"prop-types\";\r\n\r\n//props:setcategories es una funcion que pasa como componente, capaz de compartir codigo entre componentes\r\nexport const AddCategory = ({ setCategories }) => {\r\n  //necesitamos el estado para saber que se ha escrito en el input\r\n  //usestate tiene un estado inicial\r\n  const [inputValue, setInputValue] = useState(\"\");\r\n\r\n  //extraer el valor escrito e iniciar un evento\r\n  const handleInputChange = (e) => {\r\n    setInputValue(e.target.value);\r\n  };\r\n  //enviar el valor del input al componente principal para que se pueda mostrar\r\n  const handleSubmit = (e) => {\r\n    //prevenir el comportamiento por defecto del formulario, refrescar la pagina\r\n    e.preventDefault();\r\n    //todo: validar que el input no esta vacio\r\n    if (inputValue.trim().length > 2) {\r\n        //agregar el input al state, crear una nueva categoria\r\n        setCategories((cats) => [inputValue, ...cats]);\r\n        //limpiar el input, evitar dobleo posteo\r\n        setInputValue(\"\");\r\n    }\r\n\r\n  }\r\n\r\n  //agrupamiento de elementos en un formulario, en vez de un fragment\r\n  return (\r\n    // todo:realizar un formulario para que el usuario pueda enviar el valor del input\r\n    <form onSubmit = { handleSubmit }>\r\n      {/* value por default, onchage para cambiar el valor y extraerlo */}\r\n      <input \r\n      type=\"text\" \r\n      value={inputValue} \r\n      onChange={handleInputChange} \r\n      />\r\n\r\n    </form>\r\n  );\r\n};\r\n\r\n//validar que el valor del input sea la funcion setCategories\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n","// Peticion Http para obtener los gifs\r\nexport const getGifs = async (category) => {\r\n    try {\r\n      const url =\r\n        `https://api.giphy.com/v1/gifs/search?q=${encodeURI( category )}&limit=12&api_key=BYLmd0xsaH5O7qWI7QyE5WY3N6u7PHNu`;\r\n      //se la peticion http\r\n      const resp = await fetch(url);\r\n      //extraer la data de la respuesta\r\n      const { data } = await resp.json();\r\n      //se extrae la informacion especifica\r\n      const gifsFetch = data.map((img) => {\r\n        return {\r\n          id: img.id,\r\n          title: img.title,\r\n          url: img.images.downsized_medium.url,\r\n        };\r\n      });\r\n    //   console.log(gifsFetch);\r\n      //asignamos la data a la variable de estado gifs\r\n      return gifsFetch;\r\n    } catch (error) {\r\n      return error;\r\n    }\r\n  };","//componenet para mostrar un gif en el grid\r\nimport React from \"react\";\r\n\r\nexport function GifGridItem({ id, title, url }) {\r\n  return (\r\n    <main className=\"main-container\">\r\n      <img src={url} alt={id} />\r\n      <p>{title}</p>\r\n    </main>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { useFetchGifs } from \"../hooks/useFetchGifs\";\r\nimport { GifGridItem } from \"./GifGridItem\";\r\n//recibe las props de la coleccion\r\nexport const GifCollection = ({ category }) => {\r\n  //cada vez que se renderice el componente, se ejecutara el custom hook\r\n  const {data:gifs, loading} = useFetchGifs(category);\r\n\r\n  return (\r\n    <>\r\n      <h3 className=\"gifs-grid animate__bounceIn animate__fadeIn\">{category}</h3>\r\n      {loading && <p className=\"gifs-grid animate__bounceIn animate__flash\">Loading...</p>}\r\n      <div className=\"gifs-grid animate__bounceIn animate__fadeIn\">\r\n        {\r\n          //   ...gifs es un propiedad independiente de la coleccion\r\n          gifs.map((gif) => (\r\n            <GifGridItem key={gif.id} {...gif} />\r\n          ))\r\n        }\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n","//custom hooks, usado para buscar gifs y ahorrar codigo\r\nimport { useEffect, useState } from \"react\";\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\n//creacion de un custom hook\r\nexport const useFetchGifs = (category) => {\r\n  const [state, setState] = useState({\r\n    data: [],\r\n    loading: true,\r\n  });\r\n  //usar useEffect para cargar codigo condicional, solo quiero que se ejecute cuando se renderice por primera vez\r\n  useEffect(() => {\r\n\r\n    getGifs(category).then((imgs) => {\r\n        setState({\r\n          data: imgs,\r\n          loading: false,\r\n        });\r\n    });\r\n    \r\n  }, [category]);\r\n\r\n  return state; // data, loading\r\n};\r\n","//componente principal de la aplicacion gifExpertApp\r\nimport React, { useState } from \"react\";\r\nimport { AddCategory } from \"./components/AddCategory\";\r\nimport { GifCollection } from \"./components/gifCollection\";\r\n\r\nconst GifExpertApp = () => {\r\n  //   usar el hook para obtener el state para poder mutar el estado y renderizarlo\r\n  const [categories, setCategories] = useState([\r\n    \"One-Punch\",\r\n  ]);\r\n\r\n  return (\r\n    <>\r\n      <h2>GifExpertApp</h2>\r\n        {/* crear comunicacion entre componentes */}\r\n      <AddCategory  setCategories={setCategories}/>\r\n      <hr />\r\n\r\n      <ol>\r\n        {/* propertie key usada en li y es el id unico del elemento */}\r\n        {categories.map((category) => \r\n            // <li key={category}>{category}</li>\r\n           <GifCollection \r\n            key={category} \r\n            category={category} \r\n           />\r\n            )\r\n        }\r\n      </ol>\r\n\r\n    </>\r\n  );\r\n};\r\n\r\nexport { GifExpertApp };\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './gifExpertApp';\n//estilos de la aplicacion\nimport './index.css';\n\nReactDOM.render(\n  \n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}